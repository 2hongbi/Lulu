name: Deploy to Amazon ECR and ECS

on:
  push:
    paths:
      - 'src/airflow/**'
    branches:
      - main

env:
  AWS_REGION: ap-northeast-3
  ECR_REPOSITORY: de-4-2-ecr/airflow
  ECS_CLUSTER: ecs-de-4-2
  DNS_NAME: de-4-2-alb

jobs:
  deploy:
    if: github.repository == 'data-engineering-team4/Lulu'
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          masks: True

      - name: Build and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          FULL_IMAGE_NAME="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t $FULL_IMAGE_NAME -f src/airflow/Dockerfile src/airflow/
          docker push $FULL_IMAGE_NAME
          echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_ENV

      - name: Download task definition for airflow-scheduler
        run: |
          aws ecs describe-task-definition --task-definition lulu-airflow-scheduler --query taskDefinition > task-definition-scheduler.json

      - name: Modify and Register new task definition for airflow-scheduler
        run: |
          jq '.containerDefinitions[0].image = "'${{ env.FULL_IMAGE_NAME }}'" | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-definition-scheduler.json > modified-task-definition.json
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://modified-task-definition.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV

      - name: Update service for airflow-scheduler
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service lulu-airflow-scheduler --task-definition ${{ env.TASK_DEFINITION_ARN }}

      - name: Download task definition for airflow-worker
        run: |
          aws ecs describe-task-definition --task-definition lulu-airflow-worker --query taskDefinition > task-definition-worker.json

      - name: Modify and Register new task definition for airflow-worker
        run: |
          jq '.containerDefinitions[0].image = "'${{ env.FULL_IMAGE_NAME }}'" | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-definition-worker.json > modified-task-definition-worker.json
          TASK_DEFINITION_ARN_WORKER=$(aws ecs register-task-definition --cli-input-json file://modified-task-definition-worker.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEFINITION_ARN_WORKER=$TASK_DEFINITION_ARN_WORKER" >> $GITHUB_ENV

      - name: Update service for airflow-worker
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service lulu-airflow-worker --task-definition ${{ env.TASK_DEFINITION_ARN_WORKER }}

      - name: Download task definition for airflow-web-server
        run: |
          aws ecs describe-task-definition --task-definition lulu-airflow-web-server --query taskDefinition > task-definition-web-server.json

      - name: Modify and Register new task definition for airflow-web-server
        run: |
          jq '.containerDefinitions[0].image = "'${{ env.FULL_IMAGE_NAME }}'" | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-definition-web-server.json > modified-task-definition-web-server.json
          TASK_DEFINITION_ARN_WEB_SERVER=$(aws ecs register-task-definition --cli-input-json file://modified-task-definition-web-server.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEFINITION_ARN_WEB_SERVER=$TASK_DEFINITION_ARN_WEB_SERVER" >> $GITHUB_ENV

      - name: Update service for airflow-web-server
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service lulu-airflow-web-server --task-definition ${{ env.TASK_DEFINITION_ARN_WEB_SERVER }}

      - name: Get lb DNS
        run: |
          LB_DNS=$(aws elbv2 describe-load-balancers --names ${{ env.DNS_NAME }} --query 'LoadBalancers[0].DNSName' --output text) || echo "LB_DNS failed"
          echo "LB_DNS=$LB_DNS" >> $GITHUB_ENV

      - name: Set Slack Message
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "SLACK_MESSAGE=🎉 ECR/ECS 배포가 성공했습니다! 웹 서버 주소: ${{ env.LB_DNS }} 🎉" >> $GITHUB_ENV
          else
            echo "SLACK_MESSAGE=💣 ECR/ECS 배포가 실패했습니다. 💣" >> $GITHUB_ENV
          fi
        if: always()

      - name: Notify Slack
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_USERNAME: GitHub CI
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: ${{ env.SLACK_MESSAGE }}
